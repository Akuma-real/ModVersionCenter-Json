name: Update Apps Version

on:
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install requests
        run: pip install requests

      - name: Process version info
        run: |
          python -c '
          import json
          import os
          import requests
          
          # 创建输出目录
          os.makedirs("output", exist_ok=True)
          
          # 应用信息列表
          apps = [
              {
                  "name": "Intelligen",
                  "description": "Intelligen 是一个由C++编写的magisk/Kernelsu模块，智能分类管理文件，让你的设备文件夹不再混乱。你可以自定义文件夹的分类规则，使设备文件夹更加整洁。",
                  "update_url": "https://raw.githubusercontent.com/YumeYuka/intelligent/master/update.json",
                  "type": "json"
              },
              {
                  "name": "ZygiskNext",
                  "description": "ZygiskNext 是一个 Zygisk 实现，用于在 KernelSU 和 Magisk 中提供 Zygisk API 支持。",
                  "update_url": "https://api.github.com/repos/Dr-TSNG/ZygiskNext/releases/latest",
                  "type": "github"
              }
          ]
          
          # 用于存储所有应用信息的列表
          all_apps_info = []
          
          for app in apps:
              try:
                  # 获取云端版本信息
                  response = requests.get(app["update_url"])
                  
                  if app["type"] == "json":
                      cloud_info = response.json()
                      version_code = cloud_info["versionCode"]
                      version = cloud_info["version"]
                  elif app["type"] == "github":
                      release_info = response.json()
                      version = release_info["tag_name"]
                      # 对于 GitHub 发布，我们用不带 v 的版本号作为 versionCode
                      version_code = int(version.replace("v", "").replace(".", ""))
                  
                  # 创建标准格式的版本信息
                  version_info = {
                      "name": app["name"],
                      "description": app["description"],
                      "version": {
                          "versionCode": version_code,
                          "version": version
                      }
                  }
                  
                  # 添加到所有应用列表
                  all_apps_info.append(version_info)
                      
              except Exception as e:
                  print(f"处理 {app["name"]} 时出错: {str(e)}")
          
          # 保存所有应用信息到 all.json
          with open("output/all.json", "w", encoding="utf-8") as f:
              json.dump({"apps": all_apps_info}, f, ensure_ascii=False, indent=2)
          '

      - name: Deploy to data branch
        run: |
          git init
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          mv output/* .
          rm -rf output
          git add .
          git commit -m "Update apps version info"
          git branch -M data
          git remote add origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push -f origin data 